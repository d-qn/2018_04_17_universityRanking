writeLines(sprintf("var page = require('webpage').create();
page.open('%s', function () {
console.log(page.content); //page source
phantom.exit();
});", url), con = file)
}
if(scrapeData) {
## 1. get QS indicators
qs_table <- read_html(qsLocalUrl) %>%
html_nodes("table#qs-rankings-indicators") %>%
html_table()
# some ranking are NA, remove them
qs_table <- qs_table[[1]] %>%
rename(qs_rank = `# RANK20182017201620152018`) %>%
filter(qs_rank != 'N/A')
countries <- read_html(qsLocalUrlCountry) %>%
html_nodes("table#qs-rankings") %>%
html_nodes(".country div img") %>%
html_attr("data-original-title")
unis <- read_html(qsLocalUrlCountry) %>%
html_nodes("table#qs-rankings") %>%
html_nodes(".uni div") %>%
html_nodes(".title") %>%
html_text()
stopifnot(nrow(qs_table) == length(countries))
qs_table$country <- countries[match(qs_table$UNIVERSITY, unis)]
# qs_table$uni <- unis[match(qs_table$UNIVERSITY, unis)]
qs_table %<>% select(qs_rank, UNIVERSITY, country, everything())
# qs_table %<>% select(qs_rank, UNIVERSITY, country, uni, everything())
tmp <- read_html(qsLocalUrlCountry) %>%
html_nodes("table#qs-rankings") %>% html_table()
## 2 Times
# render the javacript page and save it
renderJS_page(timesUrl, "scrape_times.js")
system("~/swissinfo/phantomjs-2.1.1-macosx/bin/phantomjs scrape_times.js > scrape_times.html")
## note: run html_text on the table node, will result in a mess of text (unveristy name and country appended)
ti_table <- read_html("scrape_times.html") %>%
html_node("table") %>%
html_nodes ("tr") #%>%  html_children()
#ti_table %>% html_children()
ti_rank <- ti_table %>%
html_nodes(".rank.sorting_1.sorting_2") %>%
html_text()
ti_name <- ti_table %>%
html_nodes(".name.namesearch a") %>%
html_text()
# get rid of the apply caught
ti_name <- ti_name[which(!grepl("Apply", ti_name))]
ti_name <- matrix(ti_name, ncol = 3, byrow = T)[,1:2] %>%
as.tibble() %>%
rename(name = V1, country = V2)
ti_table <- cbind(ti_rank, ti_name) %>% as.tibble()
## 3 Shangai
scrapeShangaiRanking <- function(url) {
sh_tmp <- read_html(url) %>%
html_nodes("table") %>%
html_table(fill = T) %>%
.[[1]]
colnames(sh_tmp) <- c(
'sh_rank', 'name', 'V3', 'nationalRank', 'score',
'alumni', 'award', 'HiCi', 'N&S', 'PUB', 'PCP')
sh_table <- sh_tmp %>%
as.tibble() %>%
select(-V3)
# retrieve the country back
countries <-read_html(url) %>%
html_nodes("table tr") %>%
html_nodes("td a") %>%
html_attr("href")
idx <- str_detect(countries, pattern = "^World\\-University\\-Rankings\\-2017\\/")
countries <- str_replace(countries[idx], "^World\\-University\\-Rankings\\-2017\\/", "")
countries <- str_replace(countries, "\\-", " ") %>%
str_replace("\\.html", "")
stopifnot(nrow(sh_table) == length(countries))
sh_table$country = countries
sh_table
}
sh_table <- scrapeShangaiRanking(shangaiUrl1)
save(qs_table, ti_table, sh_table, file = "data/3rankingScraped.RData")
} else {
load("data/3rankingScraped.RData")
}
qst <- qs_table %>%
filter(!qs_rank %in%
c('501-550', '551-600', '601-650', '651-700',
'701-750', '751-800', '801-1000'))
qst
qst$UNIVERSITY
qst <- qs_table %>%
filter(!qs_rank %in%
c('501-550', '551-600', '601-650', '651-700',
'701-750', '751-800', '801-1000')) %>%
# remove the abbrevation from the unversity names
mutate(UNIVERSITY = str_replace_all(UNIVERSITY, "\\(.*\\)$", ""))
qst$UNIVERSITY
qst <- qs_table %>%
filter(!qs_rank %in%
c('501-550', '551-600', '601-650', '651-700',
'701-750', '751-800', '801-1000')) %>%
# remove the abbrevation from the unversity names
mutate(UNIVERSITY = str_replace_all(UNIVERSITY, " \\(.*\\)$", ""))
nrow(qst)
ti_table %<>%
mutate(ti_rank = str_replace_all(ti_rank, "=", ""))
tit <- ti_table %>% filter(!ti_rank %in% c("501–600", "601–800", "801–1000", "1001+"))
#tit$ti_rank
nrow(tit)
#sh_table$sh_rank
nrow(sh_table)
## 2. geocode
# https://stackoverflow.com/questions/36175529/getting-over-query-limit-after-one-request-with-geocode?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
# -- need to install the devtools version of ggmap 2.7 and register API key, otherwise full of query limit errors!!!
register_google(key = "AIzaSyBGsMcsB0QKM2Mjxh-JvPPrn-5wm0KRr3o")
register_google
?register_google
library(ggmap)
qst <- qs_table %>%
filter(!qs_rank %in%
c('501-550', '551-600', '601-650', '651-700',
'701-750', '751-800', '801-1000')) %>%
# remove the abbrevation from the unversity names
mutate(UNIVERSITY = str_replace_all(UNIVERSITY, " \\(.*\\)$", ""))
nrow(qst)
ti_table %<>%
mutate(ti_rank = str_replace_all(ti_rank, "=", ""))
tit <- ti_table %>% filter(!ti_rank %in% c("501–600", "601–800", "801–1000", "1001+"))
#tit$ti_rank
nrow(tit)
#sh_table$sh_rank
nrow(sh_table)
## 2. geocode
# https://stackoverflow.com/questions/36175529/getting-over-query-limit-after-one-request-with-geocode?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
# -- need to install the devtools version of ggmap 2.7 and register API key, otherwise full of query limit errors!!!
register_google(key = "AIzaSyBGsMcsB0QKM2Mjxh-JvPPrn-5wm0KRr3o")
# a. QS init
qst$lon <- NA
qst$lat <- NA
i <- 1:nrow(qst)
geocodeQueryCheck()
res <- geocode(str_c(qst$UNIVERSITY[i], ", ", qst$country[i]), output = "latlon", source = "google", messaging = T)
str(res)
res
qst[i,"lon"] <- res$lon
qst[i,"lat"] <- res$lat
str(tit)
qst_new <- qst
load("input/3top500RankingGeocoded.RData")
setwd("~/swissinfo/2018_04_17_universityRanking")
load("input/3top500RankingGeocoded.RData")
qst <- qst_new
save(qst, tit, sh_table, file = "input/3top500RankingGeocoded.RData")
load("input/3top500RankingGeocoded.RData")
qtmp <- qst %>%
select(qs_rank, UNIVERSITY, country, lon, lat) %>%
rename(qs_name = UNIVERSITY, qs_country = country) %>%
mutate(
qs_rank = str_replace_all(qs_rank, "^=", ""),
qs_key = 1:n()
)
ttmp <- tit %>%
rename(ti_name = name, ti_country = country) %>%
mutate(ti_key = 1:n())
stmp <- sh_table %>%
select(sh_rank, name, country, lon, lat) %>%
rename(sh_name = name, sh_country = country) %>%
mutate(
sh_key = 1:n()
)
rank2int <- function(ranks) {
idxInt <- which(str_detect(ranks, "^\\d+$"))
if(length(idxInt) > 0) {
ranks[idxInt] <- as.integer(ranks[idxInt])
}
# get the index of integer intervals
idxItl <- which(str_detect(ranks, "^\\d+\\-\\d+$"))
if(length(idxItl) > 0) {
rrange <- tibble(
rangeStart = str_extract(ranks[idxItl], "^\\d+") %>% as.integer(),
rangeEnd = str_extract(ranks[idxItl], "\\d+$") %>% as.integer()
)
ranks[idxItl] <- rowMeans(rrange)
}
as.numeric(ranks)
}
threeR <- full_join(qtmp, ttmp) %>%
full_join(stmp) %>%
mutate(
qs_rank = rank2int(qs_rank),
ti_rank = rank2int(ti_rank),
sh_rank = rank2int(sh_rank)
)
threeR$name <- ifelse(!is.na(threeR$qs_name), threeR$qs_name,
ifelse(!is.na(threeR$ti_name), threeR$ti_name, threeR$sh_name))
stopifnot(all(!is.na(threeR$name)))
threeR$country <- ifelse(!is.na(threeR$qs_country), threeR$qs_country,
ifelse(!is.na(threeR$ti_country), threeR$ti_country, threeR$sh_country))
stopifnot(all(!is.na(threeR$country)))
str(threeR)
threeR %>%
select(-qs_name, -qs_country, -ti_name, -ti_country, -sh_name, -sh_country)
c(qst$lon, tit$lon, sh_table$lon) %>% unique() %>% length()
c(qst$lat, tit$lat, sh_table$lat) %>% unique() %>% length()
qtmp
threeR <- full_join(stmp, ttmp) %>%
full_join(qtmp) %>%
mutate(
qs_rank = rank2int(qs_rank),
ti_rank = rank2int(ti_rank),
sh_rank = rank2int(sh_rank)
)
threeR$name <- ifelse(!is.na(threeR$qs_name), threeR$qs_name,
ifelse(!is.na(threeR$ti_name), threeR$ti_name, threeR$sh_name))
stopifnot(all(!is.na(threeR$name)))
threeR$country <- ifelse(!is.na(threeR$qs_country), threeR$qs_country,
ifelse(!is.na(threeR$ti_country), threeR$ti_country, threeR$sh_country))
stopifnot(all(!is.na(threeR$country)))
threeR %<>%
select(-qs_name, -qs_country, -ti_name, -ti_country, -sh_name, -sh_country)
str(threeR)
threeR
View(threeR)
qtmp <- qst %>%
select(qs_rank, UNIVERSITY, country, lon, lat) %>%
rename(qs_name = UNIVERSITY, qs_country = country) %>%
mutate(
qs_rank = str_replace_all(qs_rank, "^=", ""),
qs_key = 1:n(),
lonlat = str_c(lon, lat)
)
qtmp
qtmp <- qst %>%
select(qs_rank, UNIVERSITY, country, lon, lat) %>%
rename(qs_name = UNIVERSITY, qs_country = country) %>%
mutate(
qs_rank = str_replace_all(qs_rank, "^=", ""),
qs_key = 1:n(),
lonlat = str_c(lon, " - ", lat)
)
qtmp
qtmp <- qst %>%
select(qs_rank, UNIVERSITY, country, lon, lat) %>%
rename(qs_name = UNIVERSITY, qs_country = country) %>%
mutate(
qs_rank = str_replace_all(qs_rank, "^=", ""),
qs_key = 1:n(),
lonlat = str_c(lon, " - ", lat)
)
ttmp <- tit %>%
rename(ti_name = name, ti_country = country) %>%
mutate(
ti_key = 1:n(),
lonlat = str_c(lon, " - ", lat)
)
stmp <- sh_table %>%
select(sh_rank, name, country, lon, lat) %>%
rename(sh_name = name, sh_country = country) %>%
mutate(
sh_key = 1:n(),
lonlat = str_c(lon, " - ", lat)
)
rank2int <- function(ranks) {
idxInt <- which(str_detect(ranks, "^\\d+$"))
if(length(idxInt) > 0) {
ranks[idxInt] <- as.integer(ranks[idxInt])
}
# get the index of integer intervals
idxItl <- which(str_detect(ranks, "^\\d+\\-\\d+$"))
if(length(idxItl) > 0) {
rrange <- tibble(
rangeStart = str_extract(ranks[idxItl], "^\\d+") %>% as.integer(),
rangeEnd = str_extract(ranks[idxItl], "\\d+$") %>% as.integer()
)
ranks[idxItl] <- rowMeans(rrange)
}
as.numeric(ranks)
}
threeR <- full_join(qtmp, ttmp, by = "lonlat") %>%
full_join(stmp,  by = "lonlat") %>%
mutate(
qs_rank = rank2int(qs_rank),
ti_rank = rank2int(ti_rank),
sh_rank = rank2int(sh_rank)
)
threeR$name <- ifelse(!is.na(threeR$qs_name), threeR$qs_name,
ifelse(!is.na(threeR$ti_name), threeR$ti_name, threeR$sh_name))
stopifnot(all(!is.na(threeR$name)))
threeR$country <- ifelse(!is.na(threeR$qs_country), threeR$qs_country,
ifelse(!is.na(threeR$ti_country), threeR$ti_country, threeR$sh_country))
stopifnot(all(!is.na(threeR$country)))
threeR %<>%
select(-qs_name, -qs_country, -ti_name, -ti_country, -sh_name, -sh_country)
threeR
threeR
str(threeR)
threeR
qtmp <- qst %>%
select(qs_rank, UNIVERSITY, country, lon, lat) %>%
rename(qs_name = UNIVERSITY, qs_country = country) %>%
mutate(
qs_rank = str_replace_all(qs_rank, "^=", ""),
qs_key = 1:n()
)
ttmp <- tit %>%
rename(ti_name = name, ti_country = country) %>%
mutate(
ti_key = 1:n()
)
stmp <- sh_table %>%
select(sh_rank, name, country, lon, lat) %>%
rename(sh_name = name, sh_country = country) %>%
mutate(
sh_key = 1:n()
)
rank2int <- function(ranks) {
idxInt <- which(str_detect(ranks, "^\\d+$"))
if(length(idxInt) > 0) {
ranks[idxInt] <- as.integer(ranks[idxInt])
}
# get the index of integer intervals
idxItl <- which(str_detect(ranks, "^\\d+\\-\\d+$"))
if(length(idxItl) > 0) {
rrange <- tibble(
rangeStart = str_extract(ranks[idxItl], "^\\d+") %>% as.integer(),
rangeEnd = str_extract(ranks[idxItl], "\\d+$") %>% as.integer()
)
ranks[idxItl] <- rowMeans(rrange)
}
as.numeric(ranks)
}
threeR <- full_join(qtmp, ttmp, by = "lonlat") %>%
full_join(stmp,  by = "lonlat") %>%
mutate(
qs_rank = rank2int(qs_rank),
ti_rank = rank2int(ti_rank),
sh_rank = rank2int(sh_rank)
)
threeR$name <- ifelse(!is.na(threeR$qs_name), threeR$qs_name,
ifelse(!is.na(threeR$ti_name), threeR$ti_name, threeR$sh_name))
stopifnot(all(!is.na(threeR$name)))
threeR$country <- ifelse(!is.na(threeR$qs_country), threeR$qs_country,
ifelse(!is.na(threeR$ti_country), threeR$ti_country, threeR$sh_country))
stopifnot(all(!is.na(threeR$country)))
threeR %<>%
select(-qs_name, -qs_country, -ti_name, -ti_country, -sh_name, -sh_country)
qtmp <- qst %>%
select(qs_rank, UNIVERSITY, country, lon, lat) %>%
rename(qs_name = UNIVERSITY, qs_country = country) %>%
mutate(
qs_rank = str_replace_all(qs_rank, "^=", ""),
qs_key = 1:n()
)
ttmp <- tit %>%
rename(ti_name = name, ti_country = country) %>%
mutate(
ti_key = 1:n()
)
stmp <- sh_table %>%
select(sh_rank, name, country, lon, lat) %>%
rename(sh_name = name, sh_country = country) %>%
mutate(
sh_key = 1:n()
)
rank2int <- function(ranks) {
idxInt <- which(str_detect(ranks, "^\\d+$"))
if(length(idxInt) > 0) {
ranks[idxInt] <- as.integer(ranks[idxInt])
}
# get the index of integer intervals
idxItl <- which(str_detect(ranks, "^\\d+\\-\\d+$"))
if(length(idxItl) > 0) {
rrange <- tibble(
rangeStart = str_extract(ranks[idxItl], "^\\d+") %>% as.integer(),
rangeEnd = str_extract(ranks[idxItl], "\\d+$") %>% as.integer()
)
ranks[idxItl] <- rowMeans(rrange)
}
as.numeric(ranks)
}
threeR <- full_join(qtmp, ttmp) %>%
full_join(stmp) %>%
mutate(
qs_rank = rank2int(qs_rank),
ti_rank = rank2int(ti_rank),
sh_rank = rank2int(sh_rank)
)
threeR$name <- ifelse(!is.na(threeR$qs_name), threeR$qs_name,
ifelse(!is.na(threeR$ti_name), threeR$ti_name, threeR$sh_name))
stopifnot(all(!is.na(threeR$name)))
threeR$country <- ifelse(!is.na(threeR$qs_country), threeR$qs_country,
ifelse(!is.na(threeR$ti_country), threeR$ti_country, threeR$sh_country))
stopifnot(all(!is.na(threeR$country)))
threeR %<>%
select(-qs_name, -qs_country, -ti_name, -ti_country, -sh_name, -sh_country)
threeR
threeR <- full_join(qtmp, ttmp) %>%
full_join(stmp) %>%
mutate(
qs_rank = rank2int(qs_rank),
ti_rank = rank2int(ti_rank),
sh_rank = rank2int(sh_rank)
)
threeR$name <- ifelse(!is.na(threeR$qs_name), threeR$qs_name,
ifelse(!is.na(threeR$ti_name), threeR$ti_name, threeR$sh_name))
stopifnot(all(!is.na(threeR$name)))
threeR$country <- ifelse(!is.na(threeR$qs_country), threeR$qs_country,
ifelse(!is.na(threeR$ti_country), threeR$ti_country, threeR$sh_country))
stopifnot(all(!is.na(threeR$country)))
threeR %<>%
select(-qs_name, -qs_country, -ti_name, -ti_country, -sh_name, -sh_country) %>%
select(name, country, everything())
threeR
duplicated(threeR$name)
which(duplicated(threeR$name)
which(duplicated(threeR$name))
threeR[which(duplicated(threeR$name)),]
threeR[which(duplicated(threeR$name)),'name']
threeR %>% filter(name %in% threeR[which(duplicated(threeR$name)),'name'])
load("data/3rankingScraped.RData")
str(qs_table)
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS")
ti_table
strsh_table
sh_table
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS") %>%
bind_rows() %>%
ti_table %>%
muate(key = 1:n(), source = "times")
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS")
ti_table
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS") %>%
bind_rows() %>%
ti_table %>%
muate(key = 1:n(), source = "times")
bind_rows(list(
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS"),
ti_table %>%
muate(key = 1:n(), source = "times"),
sh_table %>%
muate(key = 1:n(), source = "Shangai")
))
bind_rows(list(
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS"),
ti_table %>%
muate(key = 1:n(), source = "times"),
sh_table %>%
mutate(key = 1:n(), source = "Shangai")
))
bind_rows(list(
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS"),
ti_table %>%
mutate(key = 1:n(), source = "times"),
sh_table %>%
mutate(key = 1:n(), source = "Shangai")
))
str(sh_table)
str(ti_table)
bind_rows(list(
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS"),
ti_table %>%
select(name, country) %>%
mutate(key = 1:n(), source = "times"),
sh_table %>%
select(name, country) %>%
mutate(key = 1:n(), source = "Shangai")
))
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS"),
ti_table %>%
select(name, country) %>%
mutate(key = 1:n(), source = "times"),
sh_table %>%
select(name, country) %>%
mutate(key = 1:n(), source = "Shangai")
))
threeMessRankings <- bind_rows(list(
qs_table %>%
select(UNIVERSITY, country) %>%
rename(name = UNIVERSITY) %>%
mutate(key = 1:n(), source = "QS"),
ti_table %>%
select(name, country) %>%
mutate(key = 1:n(), source = "times"),
sh_table %>%
select(name, country) %>%
mutate(key = 1:n(), source = "Shangai")
))
write_csv(threeMessRankings, "data/threeMessRankings2OpenRefine.csv")
